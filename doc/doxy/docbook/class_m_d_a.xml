<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_m_d_a" xml:lang="en-US">
<title>MDA Class Reference</title>
<indexterm><primary>MDA</primary></indexterm>
<para>

<para>Model Driven Architecture class This servers as the connection between VM and states. </para>
 
</para>
<para>
<computeroutput>#include &lt;MDA.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_m_d_a_1a064da2b305e7d6ea12d50bff8d5e23ce">MDA</link> (<link linkend="_class_o_p">OP</link> *op)</para>

<para>Construct a new <link linkend="_class_m_d_a">MDA</link> object. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_m_d_a_1a49cdc05ef5f77581bf9b6c94f8f4ce5e"/>virtual <emphasis role="strong">~MDA</emphasis> ()</para>

<para>Destroy the <link linkend="_class_m_d_a">MDA</link> object. </para>
</listitem>
            <listitem><para>void <link linkend="_class_m_d_a_1ae5283d8e651b473d586fda5473fa47ae">change_state</link> (state_e stateID)</para>

<para>Changes state for this <link linkend="_class_m_d_a">MDA</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_m_d_a_1af229565eaeb10995e2c351be5c70a7b4"/>void <emphasis role="strong">create</emphasis> ()</para>

<para>Call the equivalent create function on the current state. </para>
</listitem>
            <listitem><para>void <link linkend="_class_m_d_a_1aeb04851c756395bdb9c290e4871f72c4">insert_cups</link> (int n)</para>

<para>Call the equivalent insert_cups function on the current state. </para>
</listitem>
            <listitem><para>void <link linkend="_class_m_d_a_1ae86747aa6c2b18da8a4a386ea8ddaf85">coin</link> (int f)</para>

<para>Call the equivalent coin function on the current state. </para>
</listitem>
            <listitem><para>void <link linkend="_class_m_d_a_1a4aa5f4aae793c861a05ea1922ba2065d">card</link> ()</para>

<para>Call the equivalent card function on the current state. </para>
</listitem>
            <listitem><para>void <link linkend="_class_m_d_a_1acf0bc2d5e0969a07845bdb311890bbe5">cancel</link> ()</para>

<para>Call the equivalent cancel function on the current state. </para>
</listitem>
            <listitem><para>void <link linkend="_class_m_d_a_1a6b9ed65dfed87b684025d1bb67693f5f">set_price</link> ()</para>

<para>Call the equivalent set_price function on the current state. </para>
</listitem>
            <listitem><para>void <link linkend="_class_m_d_a_1a7191d63e5d75fc6cb5e1c254ab5cb0c4">dispose_drink</link> (int d)</para>

<para>Call the equivalent dispose_drink function on the current state. </para>
</listitem>
            <listitem><para>void <link linkend="_class_m_d_a_1abb7dedfc1b8efee559392c39ce397383">additive</link> (int d)</para>

<para>Call the equivalent additive function on the current state. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_class_m_d_a_1a79b59e72e37c6db12c8f3278d014045f"/>std::vector&lt; State_t * &gt; <emphasis role="strong">states</emphasis></para>

<para>states in this <link linkend="_class_m_d_a">MDA</link> </para>
</listitem>
            <listitem><para><anchor xml:id="_class_m_d_a_1a6f20f8e0227f1a9db0905f3bba2913c8"/>State_t * <emphasis role="strong">current_state</emphasis></para>

<para>the current state </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Model Driven Architecture class This servers as the connection between VM and states. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_m_d_a_1a064da2b305e7d6ea12d50bff8d5e23ce"/><section>
    <title>MDA()</title>
<indexterm><primary>MDA</primary><secondary>MDA</secondary></indexterm>
<indexterm><primary>MDA</primary><secondary>MDA</secondary></indexterm>
<para><computeroutput>MDA::MDA (<link linkend="_class_o_p">OP</link> * op)</computeroutput></para><para>

<para>Construct a new <link linkend="_class_m_d_a">MDA</link> object. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>op</entry><entry>
<para>The output processor </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_m_d_a_1ae5283d8e651b473d586fda5473fa47ae"/><section>
    <title>change_state()</title>
<indexterm><primary>change_state</primary><secondary>MDA</secondary></indexterm>
<indexterm><primary>MDA</primary><secondary>change_state</secondary></indexterm>
<para><computeroutput>void MDA::change_state (state_e stateID)</computeroutput></para><para>

<para>Changes state for this <link linkend="_class_m_d_a">MDA</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>stateID</entry><entry>
<para>state enum </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_m_d_a_1aeb04851c756395bdb9c290e4871f72c4"/><section>
    <title>insert_cups()</title>
<indexterm><primary>insert_cups</primary><secondary>MDA</secondary></indexterm>
<indexterm><primary>MDA</primary><secondary>insert_cups</secondary></indexterm>
<para><computeroutput>void MDA::insert_cups (int n)</computeroutput></para><para>

<para>Call the equivalent insert_cups function on the current state. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>n</entry><entry>
<para>cups to insert </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_m_d_a_1ae86747aa6c2b18da8a4a386ea8ddaf85"/><section>
    <title>coin()</title>
<indexterm><primary>coin</primary><secondary>MDA</secondary></indexterm>
<indexterm><primary>MDA</primary><secondary>coin</secondary></indexterm>
<para><computeroutput>void MDA::coin (int f)</computeroutput></para><para>

<para>Call the equivalent coin function on the current state. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>f</entry><entry>
<para>coins to insert </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_m_d_a_1a4aa5f4aae793c861a05ea1922ba2065d"/><section>
    <title>card()</title>
<indexterm><primary>card</primary><secondary>MDA</secondary></indexterm>
<indexterm><primary>MDA</primary><secondary>card</secondary></indexterm>
<para><computeroutput>void MDA::card ( )</computeroutput></para><para>

<para>Call the equivalent card function on the current state. </para>
</para>
</section>
<anchor xml:id="_class_m_d_a_1acf0bc2d5e0969a07845bdb311890bbe5"/><section>
    <title>cancel()</title>
<indexterm><primary>cancel</primary><secondary>MDA</secondary></indexterm>
<indexterm><primary>MDA</primary><secondary>cancel</secondary></indexterm>
<para><computeroutput>void MDA::cancel ( )</computeroutput></para><para>

<para>Call the equivalent cancel function on the current state. </para>
</para>
</section>
<anchor xml:id="_class_m_d_a_1a6b9ed65dfed87b684025d1bb67693f5f"/><section>
    <title>set_price()</title>
<indexterm><primary>set_price</primary><secondary>MDA</secondary></indexterm>
<indexterm><primary>MDA</primary><secondary>set_price</secondary></indexterm>
<para><computeroutput>void MDA::set_price ( )</computeroutput></para><para>

<para>Call the equivalent set_price function on the current state. </para>
</para>
</section>
<anchor xml:id="_class_m_d_a_1a7191d63e5d75fc6cb5e1c254ab5cb0c4"/><section>
    <title>dispose_drink()</title>
<indexterm><primary>dispose_drink</primary><secondary>MDA</secondary></indexterm>
<indexterm><primary>MDA</primary><secondary>dispose_drink</secondary></indexterm>
<para><computeroutput>void MDA::dispose_drink (int d)</computeroutput></para><para>

<para>Call the equivalent dispose_drink function on the current state. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>d</entry><entry>
<para>drink enum d to dispose </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_m_d_a_1abb7dedfc1b8efee559392c39ce397383"/><section>
    <title>additive()</title>
<indexterm><primary>additive</primary><secondary>MDA</secondary></indexterm>
<indexterm><primary>MDA</primary><secondary>additive</secondary></indexterm>
<para><computeroutput>void MDA::additive (int d)</computeroutput></para><para>

<para>Call the equivalent additive function on the current state. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>d</entry><entry>
<para>additive enum d to dispose </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
//wsl$/Debian/home/bytewise/github/CS586_Project/Part 2/include/MDA.hpp//wsl$/Debian/home/bytewise/github/CS586_Project/Part 2/src/MDA.cpp</section>
</section>
